//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Ilyas/InputSystems/DebugAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @DebugAction : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @DebugAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""DebugAction"",
    ""maps"": [
        {
            ""name"": ""Debugging"",
            ""id"": ""79803205-eacb-47ee-a306-7abf69cdbc46"",
            ""actions"": [
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""8aaa1c19-37c6-49ae-a15b-d9673ba74b6e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Activate"",
                    ""type"": ""Button"",
                    ""id"": ""b3be9ecd-51d3-43a4-aa4d-d753d8c979e7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""d4d9a2b6-84ca-46be-9508-66a1fa5d9e6f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a6e409c9-5f75-4973-b2bd-8bd204039e0b"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c7da7c12-d30a-4806-a9ca-95c909b0f4a2"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Activate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""a6bcd6aa-9d6c-4560-b256-a5ffce877a44"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""530fe70b-9348-4d7f-911b-9c93705b62f6"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""76e6eb05-abfe-4c2c-9a57-092b18ebe33e"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""58afe755-ca86-46dc-b930-f25e91ae3a07"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""8fd9d2fa-4aa9-4fc6-9e53-544242585107"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Debugging
        m_Debugging = asset.FindActionMap("Debugging", throwIfNotFound: true);
        m_Debugging_Select = m_Debugging.FindAction("Select", throwIfNotFound: true);
        m_Debugging_Activate = m_Debugging.FindAction("Activate", throwIfNotFound: true);
        m_Debugging_Movement = m_Debugging.FindAction("Movement", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Debugging
    private readonly InputActionMap m_Debugging;
    private IDebuggingActions m_DebuggingActionsCallbackInterface;
    private readonly InputAction m_Debugging_Select;
    private readonly InputAction m_Debugging_Activate;
    private readonly InputAction m_Debugging_Movement;
    public struct DebuggingActions
    {
        private @DebugAction m_Wrapper;
        public DebuggingActions(@DebugAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Select => m_Wrapper.m_Debugging_Select;
        public InputAction @Activate => m_Wrapper.m_Debugging_Activate;
        public InputAction @Movement => m_Wrapper.m_Debugging_Movement;
        public InputActionMap Get() { return m_Wrapper.m_Debugging; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DebuggingActions set) { return set.Get(); }
        public void SetCallbacks(IDebuggingActions instance)
        {
            if (m_Wrapper.m_DebuggingActionsCallbackInterface != null)
            {
                @Select.started -= m_Wrapper.m_DebuggingActionsCallbackInterface.OnSelect;
                @Select.performed -= m_Wrapper.m_DebuggingActionsCallbackInterface.OnSelect;
                @Select.canceled -= m_Wrapper.m_DebuggingActionsCallbackInterface.OnSelect;
                @Activate.started -= m_Wrapper.m_DebuggingActionsCallbackInterface.OnActivate;
                @Activate.performed -= m_Wrapper.m_DebuggingActionsCallbackInterface.OnActivate;
                @Activate.canceled -= m_Wrapper.m_DebuggingActionsCallbackInterface.OnActivate;
                @Movement.started -= m_Wrapper.m_DebuggingActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_DebuggingActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_DebuggingActionsCallbackInterface.OnMovement;
            }
            m_Wrapper.m_DebuggingActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Select.started += instance.OnSelect;
                @Select.performed += instance.OnSelect;
                @Select.canceled += instance.OnSelect;
                @Activate.started += instance.OnActivate;
                @Activate.performed += instance.OnActivate;
                @Activate.canceled += instance.OnActivate;
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
            }
        }
    }
    public DebuggingActions @Debugging => new DebuggingActions(this);
    public interface IDebuggingActions
    {
        void OnSelect(InputAction.CallbackContext context);
        void OnActivate(InputAction.CallbackContext context);
        void OnMovement(InputAction.CallbackContext context);
    }
}
